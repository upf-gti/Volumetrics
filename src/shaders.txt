\shaders
volumetric_default vertex.vs volumetric_default.fs
volumetric_xray vertex.vs volumetric_xray.fs
volumetric_mip vertex.vs volumetric_mip.fs
volumetric_picking vertex.vs volumetric_picking.fs
debug_volumetric_jittering vertex.vs debug_volumetric_jittering.fs
debug_volumetric_depth vertex.vs debug_volumetric_depth.fs

\vertex.vs
#version 300 es
precision highp float;
in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
out vec3 v_pos;
out vec3 v_normal;
out vec2 v_coord;
uniform mat4 u_mvp;
void main() {
    v_pos = a_vertex.xyz;
    v_coord = a_coord;
    v_normal = a_normal;
    gl_Position = u_mvp * vec4(v_pos,1.0);
}

\fragment_headers_utils
#version 300 es
precision highp float;
precision highp sampler3D;
precision highp isampler3D;
precision highp usampler3D;
in vec3 v_pos;
in vec3 v_normal;
in vec2 v_coord;
out vec4 cdest;
uniform vec3 u_camera_position;
uniform vec3 u_local_camera_position;
uniform vec3 u_position;
uniform vec3 u_resolution;
uniform vec4 u_background;
uniform vec4 u_cutting_plane;
uniform bool u_cutting_plane_active;
uniform sampler2D u_jittering_texture;
uniform sampler2D u_tf_texture;
uniform usampler3D u_volume_texture;
uniform float u_intensity;
uniform float u_levelOfDetail;
uniform float u_isosurfaceLevel;
uniform float u_min_value;
uniform float u_max_value;
uniform mat4 u_mvp;

// Return point where the ray enters the box. If the ray originates inside the box it returns the origin.
vec3 rayOrigin(in vec3 ro, in vec3 rd){
    if(abs(ro.x) <= 1.0 && abs(ro.y) <= 1.0 && abs(ro.z) <= 1.0) return ro;
    vec3 ip;
    // Only one these sides can hold the ray origin. The other faces will never hold it
    vec3 sides = vec3(-sign(rd.x),-sign(rd.y),-sign(rd.z));
    for(int i=0; i<3; i++){
        float c = (sides[i] - ro[i]) / rd[i];
        ip[i] = sides[i];
        ip[(i+1)%3] = c*rd[(i+1)%3]+ro[(i+1)%3];
        ip[(i+2)%3] = c*rd[(i+2)%3]+ro[(i+2)%3];
        if(abs(ip[(i+1)%3]) <= 1.0 && abs(ip[(i+2)%3]) <= 1.0) break;
    }
    return ip;
}

// Better voxel interpolation from www.iquilezles.org/www/articles/texture/texture.htm
vec4 getVoxel( in vec3 p ){
    p = p*u_resolution + 0.5;
    
    vec3 i = floor(p);
    vec3 f = p - i;
    f = f*f*f*(f*(f*6.0-15.0)+10.0);
    p = i + f;
    
    p = (p - 0.5)/u_resolution;
    vec4 v = vec4(texture( u_volume_texture, p ));
    v = (v - vec4(u_min_value)) / (u_max_value - u_min_value);  //Depending on format GPU will not normalize between 0 and 1
    return v;
}

float random (vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);
}

float jitteringFactor( vec2 p ){
    return random(p);
}

float pointDepth( in vec3 p ){
    vec4 homogeneous_p = u_mvp * vec4(p, 1.0);
    return 1.0 - homogeneous_p.z / homogeneous_p.w;
}

\fragment_init 
// Compute ray origin and direction in volume space [-1,1]
    vec3 ro = u_local_camera_position;
    vec3 re = v_pos;
    vec3 rd = re - ro;
    
// Compute ray origin as a point on the volume space
    ro = rayOrigin(ro, rd);
    vec3 rs = ro;   //Ray sample
    rd = normalize(rd) * (1.0 / u_levelOfDetail);
    float d = length(rd);

// Initialize cdest vec4 to store color
    cdest = vec4(0.0,0.0,0.0,0.0);

\fragment_postinit_jittering
    //Introduce an offset in the ray starting position along the ray direction
    rs = rs - rd*jitteringFactor(gl_FragCoord.xy);

\fragment_interpolation
    vec3 voxs = (rs + vec3(1.0))/2.0;
    float f = texture( u_volume_texture, voxs ).x;

\fragment_interpolation_better
    vec3 voxs = (rs + vec3(1.0))/2.0;
    float f = getVoxel(voxs).x;

\fragment_classification_direct
    vec4 csrc = vec4(f,f,f,f);

\fragment_classification_transfer_function
    vec4 csrc = texture( u_tf_texture, vec2(f,0.0) );

\fragment_compositing_basic
    csrc = vec4(csrc.xyz * csrc.w, csrc.w); //transparency, applied this way to avoid color bleeding
    cdest = d * csrc * (1.0 - cdest.w) + cdest; //compositing with previous value

\fragment_compositing_xray
    cdest = csrc * (1.0 - cdest.w) + cdest;

\fragment_compositing_mip
    if(csrc.w > cdest.w){
        cdest = csrc;
    }

\fragment_volume_depth_init
    int depthAssigned = 0;

\fragment_volume_depth
    if(csrc.w >= u_isosurfaceLevel && depthAssigned == 0 ){
        depthAssigned = 1;
        //gl_FragDepth = pointDepth(rs);
    }

\fragment_debug_exit_point
    cdest = vec4(abs(re.x) == 1.0 ? 1.0 : 0.0, abs(re.y) == 1.0 ? 1.0 : 0.0, abs(re.z) == 1.0 ? 1.0 : 0.0, 1.0);

\fragment_debug_entry_point
    cdest = vec4(abs(ro.x) == 1.0 ? 1.0 : 0.0, abs(ro.y) == 1.0 ? 1.0 : 0.0, abs(ro.z) == 1.0 ? 1.0 : 0.0, 1.0);

\fragment_debug_entry_abs
    cdest = vec4(abs(ro.x), abs(ro.y), abs(ro.z), 1.0);

\fragment_debug_distance_entry_exit
    cdest = 0.1*vec4(distance(ro,re), distance(ro,re), distance(ro,re), 1.0);

\fragment_debug_position_entry
    cdest = vec4(abs(ro).xyz, 1.0);

\fragment_debug_jittering_intensity
    cdest = vec4(jitteringFactor(gl_FragCoord.xy), jitteringFactor(gl_FragCoord.xy), jitteringFactor(gl_FragCoord.xy), 1.0);

\volumetric_default.fs
#import "fragment_headers_utils"

void main() {
    #import "fragment_volume_depth_init"
    #import "fragment_init"
    #import "fragment_postinit_jittering"

    // Use raymarching algorithm
    for(int i=0; i<100000; i++){
        vec3 absrs = abs(rs);
        if(i > 1 && (absrs.x > 1.0 || absrs.y > 1.0 || absrs.z > 1.0)) break;

        if(!u_cutting_plane_active || (u_cutting_plane.x*rs.x + u_cutting_plane.y*rs.y + u_cutting_plane.z*rs.z + u_cutting_plane.w > 0.0) ){
            // Interpolation
            #import "fragment_interpolation_better"

            // Classification
            #import "fragment_classification_transfer_function"

            // Compositing
            #import "fragment_compositing_basic"

            // Set volume depth if main isosurface level is reached
            #import "fragment_volume_depth"
        }

        if(cdest.w >= 1.0) break;
        rs = rs + rd;
    }
        
    // Final color
    cdest = cdest * u_intensity;
    if(cdest.w < 0.01) discard;
    cdest = u_background * (1.0 - cdest.w) + cdest;
}

\volumetric_xray.fs
#import "fragment_headers_utils"

void main() {
    #import "fragment_volume_depth_init"
    #import "fragment_init"

    // Use raymarching algorithm
    for(int i=0; i<100000; i++){
        vec3 absrs = abs(rs);
        if(i > 1 && (absrs.x > 1.0 || absrs.y > 1.0 || absrs.z > 1.0)) break;

        // Interpolation
        #import "fragment_interpolation_better"

        // Classification
        #import "fragment_classification_direct"

        // Compositing
        #import "fragment_compositing_xray"

        // Set volume depth if main isosurface level is reached
        #import "fragment_volume_depth"

        if(cdest.w >= 1.0) break;
        rs = rs + rd;
    }

    // Final color
    cdest = cdest * u_intensity;
    if(cdest.w < 0.01) discard;
    cdest = u_background * (1.0 - cdest.w) + cdest;
}

\volumetric_mip.fs
#import "fragment_headers_utils"

void main() {
    #import "fragment_volume_depth_init"
    #import "fragment_init"

    // Use raymarching algorithm
    for(int i=0; i<100000; i++){
        vec3 absrs = abs(rs);
        if(i > 1 && (absrs.x > 1.0 || absrs.y > 1.0 || absrs.z > 1.0)) break;

        // Interpolation
        #import "fragment_interpolation_better"

        // Classification
        #import "fragment_classification_transfer_function"

        // Compositing
        #import "fragment_compositing_mip"

        // Set volume depth if main isosurface level is reached
        #import "fragment_volume_depth"

        if(cdest.w >= 1.0) break;
        rs = rs + rd;
    }

    // Final color
    cdest = cdest * u_intensity;
    if(cdest.w < 0.01) discard;
    cdest = u_background * (1.0 - cdest.w) + cdest;
}

\volumetric_picking.fs
#import "fragment_headers_utils"

void main() {
    #import "fragment_volume_depth_init"
    #import "fragment_init"
    #import "fragment_postinit_jittering"

    // Use raymarching algorithm
    for(int i=0; i<100000; i++){
        vec3 absrs = abs(rs);
        if(i > 1 && (absrs.x > 1.0 || absrs.y > 1.0 || absrs.z > 1.0)) break;

        // Interpolation
        #import "fragment_interpolation_better"

        // Classification
        #import "fragment_classification_transfer_function"

        cdest = csrc;

        // Set volume depth if main isosurface level is reached
        #import "fragment_volume_depth"

        // If isosurface level threshold is reached stop ray marching
        if(cdest.w >= u_isosurfaceLevel) break;

        rs = rs + rd;
    }

    //If isosurface level has not been reached then discard
    if(cdest.w < u_isosurfaceLevel) discard;

    //'Color' are coordinates x, y and z of ray sample termination.
    //Alpha channel 1.0 can be used to know if there is a hit or a discard.
    cdest = vec4(rs, 1.0);
}

\debug_volumetric_jittering.fs
#import "fragment_headers_utils"

void main() {
    #import "fragment_init"
    #import "fragment_postinit_jittering"
    #import "fragment_debug_position_entry"
    cdest = cdest * u_intensity;
}

\debug_volumetric_depth.fs
#import "fragment_headers_utils"
//May need to adjust camera near and far to see something clear

void main() {
    #import "fragment_volume_depth_init"
    #import "fragment_init"
    #import "fragment_postinit_jittering"

    // Use raymarching algorithm
    for(int i=0; i<100000; i++){
        vec3 absrs = abs(rs);
        if(i > 1 && (absrs.x > 1.0 || absrs.y > 1.0 || absrs.z > 1.0)) break;

        // Interpolation
        #import "fragment_interpolation_better"

        // Classification
        #import "fragment_classification_transfer_function"

        // Compositing
        #import "fragment_compositing_basic"

        // Set volume depth if main isosurface level is reached
        #import "fragment_volume_depth"

        if(cdest.w >= 1.0) break;
        rs = rs + rd;
    }

    // Final color
    if(cdest.w < 0.01) discard;
    cdest = vec4( vec3(gl_FragDepth), 1.0 );
}
